<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dita="http://dita.oasis-open.org/architecture/2005/" xmlns:leg="http://www.lexis-nexis.com/glp/leg" xmlns:primlaw="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw/1/" version="2.0" exclude-result-prefixes="dita leg">

	<dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="leg.bodytext">
   <title>leg:bodytext <lnpid>id-CA08-14211</lnpid></title>
   <body>
      <section>
        <ul>
          <li class="- topic/li ">
            <sourcexml>leg:bodytext</sourcexml> becomes <targetxml>primlaw:bodytext</targetxml>.
          </li>
        </ul>
      </section>

           <example>
             <title>Source XML</title>
             <codeblock>

&lt;leg:bodytext&gt;
    &lt;p&gt;
        &lt;text&gt;XXVIII. And be it enacted, That no Person shall be capable of being elected a Member of the Legislative Assembly of the Province of Canada who shall not be legally or equitably seised as of Freehold, for his own Use and Benefit...&lt;/text&gt;
    &lt;/p&gt;
&lt;/leg:bodytext&gt;

                 </codeblock>
           </example>
           
           <example>
             <title>Target XML</title>
             <codeblock>

&lt;primlaw:bodytext&gt;
    &lt;p&gt;
        &lt;text&gt;XXVIII. And be it enacted, That no Person shall be capable of being elected a Member of the Legislative Assembly of the Province of Canada who shall not be legally or equitably seised as of Freehold, for his own Use and Benefit...&lt;/text&gt;
    &lt;/p&gt;
&lt;/primlaw:bodytext&gt;

             </codeblock>
           </example>

   </body>
	</dita:topic>

	<!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
	<!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-CAN\CA08-Constitutions\leg.bodytext.dita  -->
<!--	<xsl:message>CA08-Constitutions_leg.bodytext.xsl requires manual development!</xsl:message> 
-->
  
  
  <xsl:template match="leg:bodytext[not(descendant::text[starts-with(.,'Note:') or starts-with(.,'NOTE:') or starts-with(., 'Editor''s Note:') or starts-with(., 'Editor''s note:') or starts-with(.,'[Note de l''')]) or not(ancestor::leg:level-not-in-force)]">
    
    <!--  Original Target XPath:  primlaw:bodytext   -->
    <primlaw:bodytext>
      <xsl:apply-templates select="@* | node() except leg:history"/>
    </primlaw:bodytext>
    <xsl:apply-templates select="child::leg:history"/>
  </xsl:template>
  
  <xsl:template match="figure" priority="2">
    <xsl:apply-templates select="p/text"/>
  </xsl:template>
  
  <xsl:template match="figure/p/text" priority="2">
    <xsl:apply-templates select="@*"/>
    <xsl:apply-templates select="node() except refpt"/>
  </xsl:template>
  
  <xsl:template match="leg:bodytext[ancestor::leg:level-not-in-force][child::l[child::li[child::p[child::text[starts-with(., 'Editor''s note:') or starts-with(., 'Note de l''éditeur:') or starts-with(., '[Editor’s note:') or starts-with(., '[Note de l')]]]]]" priority="2">
    <primlaw:bodytext>
      <note notetype="instruction">
        <bodytext>
          <xsl:apply-templates select="l[@virtual-nesting]"/>
        </bodytext>
      </note>
      <xsl:if test="child::p[preceding-sibling::*[1][self::l[child::li[child::p[child::text[starts-with(., 'Editor''s note:') or starts-with(., 'Note de l''éditeur:') or starts-with(., '[Editor’s note:') or starts-with(., '[Note de l')]]]]]]">
        <p>
          <xsl:apply-templates
            select="descendant::text[not(starts-with(., 'Editor''s note:') or starts-with(., 'Note de l''éditeur:') or starts-with(., '[Editor’s note:') or starts-with(., '[Note de l'))]"/>
        </p>
      </xsl:if>
    </primlaw:bodytext>
  </xsl:template>
  
  <xsl:template match="leg:bodytext[ancestor::leg:level-not-in-force][child::l[child::li[child::p[child::text[starts-with(., 'Note:') or starts-with(., 'NOTE:')]]]]]" priority="2">
    <primlaw:bodytext>
      <note notesource="official" notetype="other">
        <bodytext>
          <xsl:apply-templates select="l[@virtual-nesting]"/>
        </bodytext>
      </note>
      <xsl:if test="child::p[preceding-sibling::*[1][self::l[child::li[child::p[child::text[starts-with(., 'Note:') or starts-with(.,'NOTE:')]]]]]]">
        <p>
          <xsl:apply-templates
            select="descendant::text[not(starts-with(., 'Editor''s note:') or starts-with(., 'Note de l''éditeur:') or starts-with(., '[Editor’s note:') or starts-with(., '[Note de l'))]"/>
        </p>
      </xsl:if>
    </primlaw:bodytext>
  </xsl:template>
  
  <xsl:template match="leg:bodytext[descendant::text[starts-with(.,'Note:') or starts-with(.,'NOTE:') or starts-with(., 'Editor''s Note:') or starts-with(., 'Editor''s note:') or starts-with(.,'[Note de l''')]][ancestor::leg:level-not-in-force][not(child::l[child::li[child::p[child::text[starts-with(., 'Editor''s note:') or starts-with(., 'Note de l''éditeur:') or starts-with(., '[Editor’s note:') or starts-with(., '[Note de l')]]]])]"  priority="1">
    
  </xsl:template>

</xsl:stylesheet>
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:dita="http://dita.oasis-open.org/architecture/2005/"
	xmlns:leg="http://www.lexis-nexis.com/glp/leg"
	xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"
	xmlns:legisinfo="http://www.lexisnexis.com/xmlschemas/content/legal/legislation-info/1/"
	xmlns:primlaw="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw/1/"
	xmlns:primlawhist="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw-history/1/"
	xmlns:primlawinfo="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw-info/1/"
	version="2.0" exclude-result-prefixes="dita leg">

	<dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="NZ-Regs-Services-leg_info">
		<title>leg:info <lnpid>id-NZ10-24413</lnpid></title>
		<body>
			<section>
				<ul>
					<li><sourcexml>leg:info</sourcexml>
						<b>becomes</b>
						<targetxml>primlaw:level[@leveltype="unclassified"]/primlaw:levelinfo/primlawinfo:primlawinfo/legisinfo:legisinfo</targetxml>
						and attribute <sourcexml>leg:info/@id</sourcexml>
						<b>becomes</b>
						<targetxml>primlaw:level/@xml:id</targetxml>. Handle the children of
							<b>leg:info</b> as described below: <note>Conversion should not create
							adjacent <targetxml>primlaw:levelinfo</targetxml>. Data should be merged
							to single <targetxml>primlaw:levelinfo</targetxml>.</note>
						<note>Conversion should not create adjacent
								<targetxml>primlawinfo:primlawinfo</targetxml>. Data should be
							merged to single <targetxml>primlawinfo:primlawinfo</targetxml>.</note>
						<pre>
              <b><i>Example: Source XML 1</i></b>
                  

&lt;leg:info&gt;
	....
&lt;/leg:info&gt;


	</pre>
						<pre>
                    
              <b><i>Example: Target XML 1</i></b>              

&lt;primlaw:level leveltype="unclassified"&gt;
	&lt;primlaw:levelinfo&gt;
		&lt;primlawinfo:primlawinfo&gt;
			&lt;legisinfo:legisinfo&gt;
			....
			&lt;/legisinfo:legisinfo&gt;
		&lt;/primlawinfo:primlawinfo&gt;
	&lt;/primlaw:levelinfo&gt;
&lt;/primlaw:level&gt;

</pre>
					</li>

				</ul>
			</section>
		</body>
	</dita:topic>

	<!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
	<!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-PAC\NZ10_Regulation_From_Services\NZ-Regs-Services-leg_info.dita  -->
	<!--<xsl:message>NZ-Regs-Services-leg_info.xsl requires manual development!</xsl:message>-->

	<xsl:template match="leg:info">
		<!--  Original Target XPath:  primlaw:level[@leveltype="unclassified"]/primlaw:levelinfo/primlawinfo:primlawinfo/legisinfo:legisinfo   -->
		<!-- <primlaw:level>
			<xsl:attribute name="leveltype">unclassified</xsl:attribute>
			<primlaw:levelinfo>
				<primlawinfo:primlawinfo>
					
						<xsl:apply-templates select="@* | node() except leg:juris"/>
					
				</primlawinfo:primlawinfo>
			</primlaw:levelinfo>
		</primlaw:level> -->
		
		<primlaw:level leveltype="unclassified">
			<xsl:apply-templates select="@*" />
			
			<!-- Group children so that the proper wrappers can be created. -->
			<xsl:for-each-group select="node()" group-adjacent="if (self::leg:sectionlist | self::leg:relatedleg | self::leg:empleg) then 1 else 0">
				<xsl:choose>
					<!-- process section lists which create their own primlaw:level. -->
					<xsl:when test="current-grouping-key()=1">
						<xsl:for-each select="current-group()">
							<xsl:apply-templates select="." />
						</xsl:for-each>
					</xsl:when>
					<!-- products of all other children of leg:info can be within a primlaw:levelinfo of the outer primlaw:level. --> 
					<xsl:otherwise>
						<primlaw:levelinfo>
							<primlawinfo:primlawinfo>
								<!-- group again in order to determine which elements go in legisinfo:legisinfo. -->
								<!-- <xsl:for-each-group select="current-group()" group-adjacent="if (self::leg:officialname| self::leg:officialnum | self::leg:dates | self::leg:year | self::leg:relatedleg) then 2 else if (self::leg:juris) then 1 else 0"> -->
								<xsl:for-each-group select="current-group()" group-adjacent="if (self::leg:officialnum | self::leg:dates | self::leg:year | self::leg:relatedleg) then 2 else if (self::leg:juris) then 1 else 0">
									<xsl:choose>
										<xsl:when test="current-grouping-key()=2">
											<xsl:for-each select="current-group()">
												<xsl:apply-templates select="." />
											</xsl:for-each>
										</xsl:when>
										<xsl:when test="current-grouping-key()=1">
											<!-- leg:juris is excluded from the selection because it is not processed as a part of a levelinfo.  If it were processed, it would result
				                                 in an empty legisinfo:legisinfo. -->					                		
										</xsl:when>
										<xsl:otherwise>
											<legisinfo:legisinfo>
												<xsl:for-each select="current-group()">
													<xsl:apply-templates select="."/>
												</xsl:for-each>
											</legisinfo:legisinfo>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each-group>
							</primlawinfo:primlawinfo>
						</primlaw:levelinfo>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each-group>
		</primlaw:level>

	</xsl:template>

	<xsl:template match="leg:info/@id">
		<!--  Original Target XPath:  primlaw:level/@xml:id   -->
		<xsl:attribute name="xml:id">
			<xsl:value-of select="."/>
		</xsl:attribute>
	</xsl:template>

	<xsl:template match="leg:prelim">
		<primlaw:level>
			<xsl:attribute name="leveltype">unclassified</xsl:attribute>
			<primlaw:prelim>
				<xsl:apply-templates select="@* | node()"/>
			</primlaw:prelim>
		</primlaw:level>
	</xsl:template>

	<xsl:template match="leg:history">
		<primlawhist:primlawhist>
			<xsl:apply-templates select="leg:heading"/>

			<primlawhist:histgrp>
				<primlawhist:histitem>
					<bodytext>
						<xsl:apply-templates select="p"/>
					</bodytext>
				</primlawhist:histitem>
			</primlawhist:histgrp>

			<xsl:apply-templates select="leg:tableofamend"/>
		</primlawhist:primlawhist>
	</xsl:template>


	<xsl:template match="leg:tableofamend">
		<primlawhist:histgrp>
			<xsl:attribute name="grptype">tableofamend</xsl:attribute>
			<primlawhist:histitem>
				<bodytext>
					<xsl:apply-templates/>
				</bodytext>
			</primlawhist:histitem>
		</primlawhist:histgrp>
	</xsl:template>
</xsl:stylesheet>

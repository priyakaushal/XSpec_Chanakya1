<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dita="http://dita.oasis-open.org/architecture/2005/" xmlns:dig="http://www.lexis-nexis.com/glp/dig" xmlns:casedigest="http://www.lexisnexis.com/xmlschemas/content/legal/case-digest/1/" xmlns:case="http://www.lexis-nexis.com/glp/case"  xmlns:casehist="http://www.lexisnexis.com/xmlschemas/content/legal/case-history/1/" xmlns:ci="http://www.lexis-nexis.com/ci" xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/" version="2.0" exclude-result-prefixes="dita ci case dig">
	<dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="Rosetta_dig.body-to-LexisAdvance_casedigest.body">
  <title><sourcexml>dig:body</sourcexml> to <targetxml>casedigest:body</targetxml> <lnpid>id-IN08-38210</lnpid></title>
  <body>
    <p>
      <sourcexml>dig:body</sourcexml> becomes <targetxml>casedigest:body</targetxml>. 
      
      <note>All content must be converted such that the order of elements is maintained whenever possible. 
        Please see the <xref href="../../common_newest/Rosetta_Elements-LxAdv-Maintain_Sequential_Order.dita">'Maintain the Order of Elements Whenever Possible'</xref> section for more information.</note>      
         
<pre>
&lt;DIGESTDOC&gt;
  &lt;dig:body&gt;...
  &lt;/dig:body&gt;
&lt;/DIGESTDOC&gt;

<b>Becomes</b>
&lt;casedigest:casedigest&gt;
  &lt;casedigest:body&gt;...&lt;/casedigest:body&gt;  
&lt;/casedigest:casedigest&gt;
</pre>     
           
    </p>
    <section>
      <title>Changes</title>
      <p>2016-06-16: <ph id="change_20160616_HP">Created.</ph></p>
    </section>
  </body>
	</dita:topic>

	<!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
	<!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-IN\IN08-Digest\Rosetta_dig.body-to-LexisAdvance_casedigest.body.dita  -->
 

  <!--Vikas Rohilla : Updated the dig body   -->
  
  <xsl:template match="dig:body">
    <casedigest:body>
      <xsl:if test="dig:info/case:info/case:courtinfo/case:judges/ci:cite">
        <casehist:casehist>
          <casehist:subhist>
            <casehist:summary>
              <p>
                <text>
                  <xsl:variable name="judge_after_text" select="dig:info/case:info/case:courtinfo/case:judges/text()[1]">
                    
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="contains($judge_after_text,'additional reasons')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(additional reasons)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', affd')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, affd)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'; affd')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(; affd)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'affd')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(affd)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', suppd')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, suppd)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'suppd')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(suppd)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', vard')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, vard)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'vard')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(vard)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', affg')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, affg)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'affg')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(affg)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', appeal allowed')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, appeal allowed)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'appeal allowed')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(appeal allowed)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', new trial order')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, new trial order)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'new trial order')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(new trial order)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', revd')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, revd)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'revd')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(revd)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', revg')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, revg)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'revg')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(revg)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', varg')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, varg)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'varg')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(varg)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,', unreported')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(, unreported)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>
                    <xsl:when test="contains($judge_after_text,'unreported')">
                      <xsl:analyze-string select="$judge_after_text" regex="(.*)(unreported)(.*)">
                        <xsl:matching-substring>
                          <xsl:value-of select="regex-group(2),regex-group(3)"/>
                        </xsl:matching-substring>
                      </xsl:analyze-string>
                    </xsl:when>               
                  </xsl:choose>         
                  <xsl:apply-templates select="dig:info/case:info/case:courtinfo/case:judges/(child::node() except text()[1])"/>
                </text>
              </p>
            </casehist:summary>
          </casehist:subhist>
        </casehist:casehist>
      </xsl:if>
      <xsl:if test="dig:info/case:info/classification">
        <casedigest:caseinfo>
          <xsl:apply-templates select="dig:info/case:info/classification"/>
        </casedigest:caseinfo>
      </xsl:if>
      <xsl:apply-templates select="@* |dig:info/case:subhist |node() except dig:info"/>
    </casedigest:body>
  </xsl:template>
</xsl:stylesheet>
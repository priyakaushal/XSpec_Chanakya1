<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dita="http://dita.oasis-open.org/architecture/2005/" xmlns:dig="http://www.lexis-nexis.com/glp/dig" xmlns:seclaw="http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/" xmlns:ref="http://www.lexisnexis.com/xmlschemas/content/shared/reference/1/" version="2.0" exclude-result-prefixes="dita dig">

	<dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="dig.level">
    <title>dig:level <lnpid>id-CA02DS-12833</lnpid></title>
   <body>
      <section>
<ul>
         <li class="- topic/li ">
             <sourcexml class="+ topic/keyword xml-d/sourcexml ">dig:level</sourcexml> becomes
                  <targetxml class="+ topic/keyword xml-d/targetxml ">seclaw:digestgrp</targetxml>.
            
               <pre xml:space="preserve" class="- topic/pre ">

&lt;dig:level&gt;
    ...........
    ...........
&lt;/dig:level&gt;

                    </pre>
               <b class="+ topic/ph hi-d/b ">Becomes</b>
               <pre xml:space="preserve" class="- topic/pre ">
&lt;seclaw:digestgrp&gt;
    ...........
    ...........
&lt;/seclaw:digestgrp&gt; 
    

               </pre>
             
         </li>
    
      </ul>
</section>
   </body>
	</dita:topic>

	<!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
	<!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-CAN\CA02-Case_Summaries\CA02DS_DIGESTDOC_to_seclaw\dig.level.dita  -->
	
    <!-- Vikas Rohilla : Tempalte to match the dig:level not child dig:item/level-->
    <xsl:template match="dig:level[not(child::dig:item/level)]">
        <seclaw:digestgrp>
            <xsl:apply-templates select="@* | node()"/>
        </seclaw:digestgrp>
    </xsl:template>
    
    <!-- Vikas Rohilla : Tempalte to match the dig:level child dig:item/level -->
    <xsl:template match="dig:level[child::dig:item/level]">
        <xsl:apply-templates select="@* | node()"/>
    </xsl:template>
    
    <!-- Vikas Rohilla : Tempalte to match the level and not parent level   -->
    <xsl:template match="level[not(parent::level)]">
        <seclaw:level>
            <xsl:if test="not(@leveltype)">
                <xsl:attribute name="leveltype">
                    <xsl:text>unclassified</xsl:text>
                </xsl:attribute>    
            </xsl:if>
            <xsl:apply-templates select="@*"/>
            <xsl:if test="@subdoc">
                <xsl:call-template name="refanchor"/>
            </xsl:if>
            <xsl:apply-templates select="node()"/>	   
        </seclaw:level>
    </xsl:template>
    
    <!-- Vikas Rohilla : Template to match the first level and parent level and create the seclaw:bodytext/seclaw:level    -->
    <xsl:template match="level[parent::level][not(preceding-sibling::*[1][self::level or self::bodytext])]" priority="25">
        <seclaw:bodytext>
            <seclaw:level>
                <xsl:if test="not(@leveltype)">
                    <xsl:attribute name="leveltype">
                        <xsl:text>unclassified</xsl:text>
                    </xsl:attribute>    
                </xsl:if>
                <xsl:apply-templates select="@*"/>
                <xsl:if test="@subdoc">
                    <xsl:call-template name="refanchor"/>
                </xsl:if>
                <xsl:apply-templates select="node()"/>	   
            </seclaw:level> 
            <xsl:if test="following-sibling::*[1][self::level]">
                <xsl:call-template name="wrapp-level">
                    <xsl:with-param name="node" select="following-sibling::*[1][self::level]"/>
                </xsl:call-template>
            </xsl:if>
        </seclaw:bodytext>
    </xsl:template>
    
    <!-- Vikas Rohilla : Template name wrap-level     -->
    <xsl:template name="wrapp-level">
        <xsl:param name="node"/>
        <xsl:apply-templates select="$node" mode="wrap-level"/>
        <xsl:if test="$node/following-sibling::*[1][self::level]">
            <xsl:call-template name="wrapp-level">
                <xsl:with-param name="node" select="$node/following-sibling::*[1][self::level]"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>
    
    <!-- supressd the level in the cureent mode handeld in the wrap-level mode   -->
    <xsl:template match="level[parent::level][following-sibling::level]"/>
    
    <!-- Tempalte to match the level with the @mode wrap-level    -->
    <xsl:template match="level" mode="wrap-level">
        <seclaw:level>
            <xsl:if test="not(@leveltype)">
                <xsl:attribute name="leveltype">
                    <xsl:text>unclassified</xsl:text>
                </xsl:attribute>    
            </xsl:if>
            <xsl:apply-templates select="@*"/>
            <xsl:if test="@subdoc">
                <xsl:call-template name="refanchor"/>
            </xsl:if>
            <xsl:apply-templates select="node()"/>	
        </seclaw:level>
    </xsl:template>
    
    
    <!--Vikas Rohilla : Tempalate match level/@subdoc and creates  includeintoc   -->
    <xsl:template match="level/@subdoc">    
        <xsl:attribute name="includeintoc">
            <xsl:value-of select="."/>
        </xsl:attribute>
    </xsl:template>
    
    <!--Vikas Rohilla : Tempalate match level/@toc-caption and creates  alternatetoccaption   -->
    <xsl:template match="level/@toc-caption">
        <xsl:attribute name="alternatetoccaption">
            <xsl:value-of select="."/>
        </xsl:attribute>
    </xsl:template>
    
    <!--Vikas Rohilla : Tempalate match level/@leveltype and creates  @leveltype   -->
    <xsl:template match="level/@leveltype">
        <xsl:copy-of select="."/>
    </xsl:template>
    
    <!--Vikas Rohilla : Supressed the @searchtype   -->
    <xsl:template match="level/@searchtype"/>
    
    
    <!-- Template to ref:anchor when no refpt element -->
    <xsl:template name="refanchor">
        <xsl:element name="ref:anchor">
            <xsl:attribute name="id">
                <xsl:text>TOC00</xsl:text>
                <xsl:number count="level[@subdoc]" level="any" format="1"/>
            </xsl:attribute>
            <xsl:attribute name="anchortype">
                <xsl:text>local</xsl:text>
            </xsl:attribute>
            <xsl:text xml:space="preserve"> </xsl:text>
        </xsl:element>
    </xsl:template>
    

</xsl:stylesheet>
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dita="http://dita.oasis-open.org/architecture/2005/" xmlns:form="http://www.lexisnexis.com/xmlschemas/content/shared/form/1/" version="2.0" exclude-result-prefixes="dita">

	<dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="UK14_Precedents_deflist-defitem">
  <title>deflist/defitem <lnpid>id-UK14-30226</lnpid></title>
  <body>
    <p><sourcexml>deflist/defitem</sourcexml> becomes
        <targetxml>form:deflist/form:defitem</targetxml>.</p>
    <p>Attributes on <sourcexml>defitem</sourcexml> are optional and convert as follows: <ul>
        <li><sourcexml>@id</sourcexml> becomes <targetxml>@xml:id</targetxml></li>
        <li><sourcexml>@optionalKey</sourcexml> becomes <targetxml>@optionalKey</targetxml></li>
        <li><sourcexml>@alternateKey</sourcexml> becomes <targetxml>@alternateKey</targetxml></li>
        <li><sourcexml>@alternateGroupKey</sourcexml> becomes
            <targetxml>@alternateGroupKey</targetxml></li>
      </ul></p>
    <p>Children of <sourcexml>defitem</sourcexml> convert as follows:<ul>
        <li><sourcexml>defterm[@termtype]</sourcexml> becomes
            <targetxml>defterm[@termtype]</targetxml>. The attribute is optional.</li>
        <li><sourcexml>defdesc</sourcexml> becomes <targetxml>defdesc/bodytext</targetxml></li>
    </ul></p>
    <note>For UK14 Precedents, <sourcexml>deflist/defitem</sourcexml> target is always
      <targetxml>form:deflist/form:defitem</targetxml>. Therefore there are no
      <sourcexml>deflist/defitem</sourcexml> rules in the General Markup section.</note>

    <pre>
        <b>EXAMPLE</b>
            
<b><i>Source XML</i></b>

&lt;deflist&gt;
    &lt;defitem optionalKey="opt-N65991"&gt;
        &lt;defterm&gt;Foreign Public Official&lt;/defterm&gt;
        &lt;defdesc&gt;
            &lt;p&gt;
                &lt;text&gt;shall have the meaning given in Bribery Act 2010&lt;/text&gt;
            &lt;/p&gt;
        &lt;/defdesc&gt;
    &lt;/defitem&gt;
    &lt;defitem alternateKey="0001" id="a123"&gt;
        &lt;defterm&gt;Intellectual Property Rights&lt;/defterm&gt;
        &lt;defdesc&gt;
            &lt;p&gt;
                &lt;text&gt;means Patent or Trade mark or Design right&lt;/text&gt;
            &lt;/p&gt;
        &lt;/defdesc&gt;
    &lt;/defitem&gt;
    &lt;defitem alternateKey="0001" id="b456"&gt;
        &lt;defterm&gt;Intellectual Property Rights&lt;/defterm&gt;
        &lt;defdesc&gt;
            &lt;p&gt;
                &lt;text&gt;means the rights specified in Intellectual Property Act 2005&lt;/text&gt;
            &lt;/p&gt;
        &lt;/defdesc&gt;
    &lt;/defitem&gt;
&lt;/deflist&gt;
 
<b><i>Target XML</i></b>

&lt;form:deflist&gt;
  &lt;form:defitem optionalKey="opt-N65991"&gt;
    &lt;defterm&gt;Foreign Public Official&lt;/defterm&gt;
    &lt;defdesc&gt;
      &lt;bodytext&gt;
        &lt;p&gt;
          &lt;text&gt;shall have the meaning given in Bribery Act 2010&lt;/text&gt;
        &lt;/p&gt;
      &lt;/bodytext&gt;
    &lt;/defdesc&gt;
  &lt;/form:defitem&gt;
  &lt;form:defitem alternateKey="0001" xml:id="a123"&gt;
    &lt;defterm&gt;Intellectual Property Rights&lt;/defterm&gt;
    &lt;defdesc&gt;
      &lt;bodytext&gt;
        &lt;p&gt;
          &lt;text&gt;means Patent or Trade mark or Design right&lt;/text&gt;
        &lt;/p&gt;
      &lt;/bodytext&gt;
    &lt;/defdesc&gt;
  &lt;/form:defitem&gt;
  &lt;form:defitem alternateKey="0001" xml:id="b456"&gt;
    &lt;defterm&gt;Intellectual Property Rights&lt;/defterm&gt;
    &lt;defdesc&gt;
      &lt;bodytext&gt;
        &lt;p&gt;
          &lt;text&gt;means the rights specified in Intellectual Property Act 2005&lt;/text&gt;
        &lt;/p&gt;
      &lt;/bodytext&gt;
    &lt;/defdesc&gt;
  &lt;/form:defitem&gt;
&lt;/form:deflist&gt;

                </pre>
    <section>
      <title>Changes</title>
      <p>2016-03-27: <ph id="change_20160327_jm">Section is new. For UK14 Precedents, target is
          always <targetxml>form:deflist/form:defitem</targetxml>. These rules apply therefore
            <sourcexml>deflist/defitem</sourcexml> instructions have been removed from the General
          Markup section.</ph></p>
    </section>
  </body>
	</dita:topic>

	<!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
	<!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK14-Precedents\UK14_Precedents_deflist-defitem.dita  -->
	<!--<xsl:message>UK14_Precedents_deflist-defitem.xsl requires manual development!</xsl:message> -->
	<xsl:template match="note/deflist" priority="2">

		<!--  Original Target XPath:  form:deflist/form:defitem   -->
		<deflist>
				<xsl:apply-templates select="@* | node()"/>
		</deflist>

	</xsl:template>

  <xsl:template match="deflist">
    
    <!--  Original Target XPath:  form:deflist/form:defitem   -->
    <form:deflist>
      <xsl:apply-templates select="@* | node()"/>
    </form:deflist>
    
  </xsl:template>
  
  <xsl:template match="note/deflist/defitem" priority="2">
    
    <!--  Original Target XPath:  form:deflist/form:defitem   -->
    <defitem>
      <xsl:apply-templates select="@* | node()"/>
    </defitem>
    
  </xsl:template>
  
  <xsl:template match="defitem">

		<!--  Original Target XPath:  @xml:id   -->
	  <form:defitem>
			<xsl:apply-templates select="@* | node()"/>
	  </form:defitem>

	</xsl:template>

  <xsl:template match="defitem/@id">
    <xsl:attribute name="xml:id">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>
  
  <xsl:template match="defitem/@optionalKey">

		<!--  Original Target XPath:  @optionalKey   -->
		<xsl:attribute name="optionalKey">
			<xsl:value-of select="."/>
		</xsl:attribute>

	</xsl:template>

  <xsl:template match="defitem/@alternateKey">

		<!--  Original Target XPath:  @alternateKey   -->
		<xsl:attribute name="alternateKey">
			<xsl:value-of select="."/>
		</xsl:attribute>

	</xsl:template>

  <xsl:template match="defitem/@alternateGroupKey">

		<!--  Original Target XPath:  @alternateGroupKey   -->
		<xsl:attribute name="alternateGroupKey">
			<xsl:value-of select="."/>
		</xsl:attribute>

	</xsl:template>

	<xsl:template match="defterm">

		<!--  Original Target XPath:  defterm[@termtype]   -->
	  <defterm>
	    <xsl:if test="@termtype">
	    <xsl:attribute name="termtype">
	      <xsl:value-of select="@termtype"/>
	    </xsl:attribute>
	    </xsl:if>
			<xsl:apply-templates select="node()"/>
		</defterm>

	</xsl:template>
  
  <xsl:template match="defterm/@termtype">

  </xsl:template>
  
	<xsl:template match="defdesc">
<!-- WPK.  webstars 7037934 and 7022373
	    Caused schema change (see 2017-10-31T105938-KielWP which also has links to history) to make defdesc a choice between base:bodytext and form:bodytext. 
	    This allows descendents of defdesc (descendant of form) to have form:list and then form:listitem can have @alternateKey (which base:list does not allow).
	    Be careful.  base:note remains transformed as base:note even if it occurs within defdesc.  
	    and there are many use cases of defdesc and list descending from each other.  Fortunately not descending from note too as yet.  
	    In theory, this could lead to a use case of a l/li[@alternateKey] which occurs as a descendant of note (which is a descendant of defdesc).  
	    This may cause the same schema change to occur on base:note since a descendant li needs to have @alternateKey (which means form namespace).  
	    Should this arise, should it be better to allow @alternateKey on base:listitem instead of machinations of defdesc/note/l/li/@alternateKey handling?
    
	    form:list/form:listitem are the attributes needed.  And when lists occur within defdesc (but not within notes) it'll need to be form:bodytext here.	    

	  -->
    <xsl:choose>
      <xsl:when test="ancestor::form and not(ancestor::note)">
        <defdesc>
          <xsl:apply-templates select="@*"/>
          <form:bodytext>
            <xsl:apply-templates select="node() except (p[preceding-sibling::note[@notetype='instruction']] | note[@notetype='instruction'][preceding-sibling::*[1][self::p]])"/>
          </form:bodytext>
        </defdesc>
      </xsl:when>
      <xsl:otherwise>
        <defdesc>
          <xsl:apply-templates select="@*"/>
          <bodytext>
            <xsl:apply-templates select="node() except (p[preceding-sibling::note[@notetype='instruction']] | note[@notetype='instruction'][preceding-sibling::*[1][self::p]])"/>
          </bodytext>
        </defdesc>
      </xsl:otherwise>
    </xsl:choose>

	</xsl:template>
  
  <!-- WPK 2017-11-17
2017-11-07T111149-KekesiSG Add @optionalKey and @alternateKey to the attribute list for element <defdesc>.
  -->
  
  <xsl:template match="defdesc/@alternateGroupKey | defdesc/@alternateKey | defdesc/@optionalKey">
    <xsl:copy-of select="."/>
  </xsl:template>

  <!-- WPK 2017-11-17
    alternateGroupKey not supported in LA schema
  however it is allowed in Rosetta.  May need schema change to rectify.  Suppressed in meantime for schema validity-->
  <xsl:template match="defdesc/@alternateGroupKey"/>
  
  
  <!--WPK 2017-11-17
    the following templates help implement conversion related to:
    2017-10-31T105938-KielWP .Make defdesc content model be a choice between bodytext and form:bodytext.

    Checking for ancestor defdesc helps determine if bodytext or form:bodytext.
    Key item.  Note element is always transformed as base:note, so these templates check for both.
  -->
  <xsl:template match="p[ancestor::defdesc][not(ancestor::form)]" priority="30">
    <!-- see note on 	<xsl:template match="defdesc"> -->
    <p>
      <xsl:apply-templates select="@* | node() except note"/>
    </p>
    <xsl:apply-templates select="note"/>
  </xsl:template>
  
  <xsl:template match="p[ancestor::defdesc][ancestor::form][not(ancestor::note)]" priority="30">
    <!-- see note on 	<xsl:template match="defdesc"> -->
    <form:p>
      <xsl:apply-templates select="@* | node() except note"/>
    </form:p>
    <xsl:apply-templates select="note"/>
  </xsl:template>

  <xsl:template match="text[ancestor::defdesc][not(ancestor::form)]" priority="30">
    <!-- see note on 	<xsl:template match="defdesc"> -->
    <text>
      <xsl:apply-templates select="@* | node()"/>
    </text>
    <xsl:apply-templates select="note"/>
  </xsl:template>
  
  <xsl:template match="text[ancestor::defdesc][ancestor::form][not(parent::p/ancestor::note)]" priority="30">
    <!-- see note on 	<xsl:template match="defdesc"> -->
    <form:text>
      <xsl:apply-templates select="@* | node()"/>
    </form:text>
    <xsl:apply-templates select="note"/>
  </xsl:template>
  
  
<!--
4.2.6. frm:prompt (id-UK14-30213)
frm:prompt becomes form:prompt.
Attributes convert as follows:
• @id becomes @xml:id
• @optionalKey becomes @optionalKey
• @alternateKey becomes @alternateKey

4.2.13. l/li (id-UK14-30215)
l/li becomes list/listitem as described in General Markup section.
EXCEPT: When target parent is form:bodytext, l/li becomes form:list/form:listitem
Attributes on li are optional and will occur only when target is form:listitem. Attributes convert as follows:
• @id becomes @xml:id
• @optionalKey becomes @optionalKey
• @alternateKey becomes @alternateKey
• @alternateGroupKey becomes @alternateGroupKey

4.2.14. deflist/defitem (id-UK14-30226)
deflist/defitem becomes form:deflist/form:defitem.
Attributes on defitem are optional and convert as follows:
• @id becomes @xml:id
• @optionalKey becomes @optionalKey
• @alternateKey becomes @alternateKey
• @alternateGroupKey becomes @alternateGroupKey


    
    optionalKey="d21207e303" alternateGroupKey="6" alternateKey="7"
  <xsl:template match="defterm/@">
  </xsl:template>
                                      <defitem id="d291e298" alternateKey="8" alternateGroupKey="9" optionalKey="4">
                                        <defdesc optionalKey="d21207e303" alternateGroupKey="6" alternateKey="7">

  
                                <form:defitem xml:id="d291e298" alternateGroupKey="" alternateKey="" optionalKey="">
                                 <defterm>Force Majeure Event</defterm>
                                 <defdesc>

-->
</xsl:stylesheet>
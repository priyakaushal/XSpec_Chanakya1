<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:dita="http://dita.oasis-open.org/architecture/2005/"
  xmlns:glp="http://www.lexis-nexis.com/glp"
  xmlns:case="http://www.lexis-nexis.com/glp/case"
  xmlns:courtorder="urn:x-lexisnexis:content:courtorder:sharedservices:1"
  xmlns:doc="http://www.lexisnexis.com/xmlschemas/content/shared/document-level-metadata/1/"
  xmlns:pubinfo="http://www.lexisnexis.com/xmlschemas/content/shared/publication-info/1/"
  version="2.0" exclude-result-prefixes="dita">

  <dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="AU19_CC_ASX_Introduction">
    <title>Introduction <lnpid>id-AU19CC-21812</lnpid></title>
    <body>
      <p>This Conversion Instruction describes the conversion of CourtOrder 1.3_PROD schema in the
        document.</p>
      <p> The root element <sourcexml>CASEDOC</sourcexml> with the attribute <sourcexml>CASEDOC
          @type="practicenote"</sourcexml> becomes <targetxml>courtorder:courtorder</targetxml>.
          <note>Please note that the value of the attribute <sourcexml>CASEDOC
            @type="practicenote"</sourcexml> should be treated as case-insensitive.</note> It is a
        root element for CourtOrder. The source attributes are described below: <pre>
        &lt;CASEDOC type="practicenote"&gt;
        ...
        &lt;/CASEDOC&gt;
        </pre>
        <b>Becomes</b>
        <pre>
        &lt;courtorder:courtorder&gt;
        ...
        &lt;/courtorder:courtorder&gt;
      </pre>
        <ul>
          <li> The source attribute <sourcexml>CASEDOC @type</sourcexml> is suppressed because the
            distinction made by this attribute in source is handled by separate schema in NL. </li>
          <li>
            <sourcexml>CASEDOC @xml:lang</sourcexml> becomes <targetxml>courtorder:courtorder
              @xml:lang</targetxml>
            <note>Please refer 'Target @xml:lang' for more details </note>
          </li>
        </ul>
      </p>
      <p>
        <targetxml>courtorder:head</targetxml>, <targetxml>courtorder:body</targetxml>, and
          <targetxml>doc:metadata</targetxml> are created as required children of
          <targetxml>courtorder:courtorder</targetxml>
      </p>
      <section>
        <title>Notes</title>
        <p>The following information is meant to help the user understand the conventions used in
          this document.</p>
        <p>Source elements and attributes are highlighted like this: <sourcexml>XML
            SOURCE</sourcexml></p>
        <p>Target elements and attributes are highlighted like this: <targetxml>XML
            TARGET</targetxml></p>
        <p>Verify content of following target attributes: <ul>
            <li><sourcexml>@year</sourcexml> becomes <targetxml>@year</targetxml> is 4 digits in
              length. Any other lengths, do not output <targetxml>@year</targetxml>.</li>
            <li><sourcexml>@month</sourcexml> becomes <targetxml>@month</targetxml> is between
              01-12. Any numbers outside this range, do not output a
              <targetxml>@month</targetxml>.</li>
            <li><sourcexml>@day</sourcexml> becomes <targetxml>@day</targetxml> is between 01-31.
              Any numbers outside this range, do not output <targetxml>@day</targetxml>.</li>
          </ul>
        </p>
      </section>
    </body>
  </dita:topic>

  <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
  <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-PAC\AU19CC_ASX\AU19_CC_ASX_Introduction.dita  -->
  <!--<xsl:message>AU19_CC_ASX_Introduction.xsl requires manual development!</xsl:message>-->

  <xsl:template match="CASEDOC[@type='practicenote']">

    <!--  Original Target XPath:  courtorder:courtorder   -->
    <courtorder:courtorder>
    <xsl:for-each select="$lexisAdvNamespaces/*">
      <xsl:sort/>
      <xsl:namespace name="{substring-after(substring-before(., '='), ':')}"
        select="substring-after(translate(., '&#034;', ''), '=')"/>
    </xsl:for-each>
    <xsl:apply-templates select="@* | node() except docinfo"/>
      <doc:metadata>
        <xsl:if test="//copyright or
          //remotelink/inlineobject[contains(@filename, 'asx-logo.gif') or contains(@filename, 'asx_logo.gif')]">
          <pubinfo:pubinfo>
            <xsl:apply-templates select="//remotelink[inlineobject[contains(@filename, 'asx-logo.gif') or contains(@filename, 'asx_logo.gif')]] | 
              //remotelink[inlineobject[contains(@filename, 'asx-logo.gif') or contains(@filename, 'asx_logo.gif')]]"/>
            <xsl:apply-templates select="//copyright"/>
          </pubinfo:pubinfo>
        </xsl:if>
        <xsl:apply-templates select="docinfo"/>
      </doc:metadata>
    </courtorder:courtorder>

  </xsl:template>
  
  <xsl:template match="CASEDOC/@type"/>
  
  <xsl:template match="CASEDOC/@xml:lang">
    <xsl:attribute name="xml:lang">
      <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:template>

  <!--	<xsl:template match="CASEDOC&#xA;        @type=&#34;practicenote&#34;">

		<!-\-  Original Target XPath:  courtorder:courtorder   -\->
		<error_courtorder:courtorder xmlns:error_courtorder="courtorder_ERROR">
			<xsl:apply-templates select="@* | node()"/>
		</error_courtorder:courtorder>

	</xsl:template>

	<xsl:template match="CASEDOC @type">

		<!-\-  Original Target XPath:  courtorder:courtorder@xml:lang   -\->
		<error_courtorder:courtorder xmlns:error_courtorder="courtorder_ERROR">
			<xsl:apply-templates select="@* | node()"/>
		</error_courtorder:courtorder>

	</xsl:template>

	<xsl:template match="CASEDOC @xml:lang">

		<!-\-  Original Target XPath:  courtorder:courtorder@xml:lang   -\->
		<error_courtorder:courtorder xmlns:error_courtorder="courtorder_ERROR">
			<xsl:apply-templates select="@* | node()"/>
		</error_courtorder:courtorder>

	</xsl:template>

	<xsl:template match="XML&#xA;        SOURCE">

		<!-\-  Original Target XPath:  XMLTARGET   -\->
		<XMLTARGET>
			<xsl:apply-templates select="@* | node()"/>
		</XMLTARGET>

	</xsl:template>

	<xsl:template match="@year">

		<!-\-  Original Target XPath:  @year   -\->
		<xsl:attribute name="year">
			<xsl:apply-templates select="node()"/>
		</xsl:attribute>

	</xsl:template>

	<xsl:template match="@month">

		<!-\-  Original Target XPath:  @month   -\->
		<xsl:attribute name="month">
			<xsl:apply-templates select="node()"/>
		</xsl:attribute>

	</xsl:template>

	<xsl:template match="@day">

		<!-\-  Original Target XPath:  @day   -\->
		<xsl:attribute name="day">
			<xsl:apply-templates select="node()"/>
		</xsl:attribute>

	</xsl:template>-->

</xsl:stylesheet>

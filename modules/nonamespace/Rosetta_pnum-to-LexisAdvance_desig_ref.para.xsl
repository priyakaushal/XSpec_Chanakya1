<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dita="http://dita.oasis-open.org/architecture/2005/"
    xmlns:ci="http://www.lexis-nexis.com/ci" 
    xmlns:case="http://www.lexis-nexis.com/glp/case"
    xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"
    xmlns:ref="http://www.lexisnexis.com/xmlschemas/content/shared/reference/1/" version="2.0" exclude-result-prefixes="#all">

	<dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="Rosetta_pnum-to-LexisAdvance_desig_ref.para">
<title><sourcexml>pnum</sourcexml> to <targetxml>desig/ref:para</targetxml>
		<lnpid>id-CCCC-10504</lnpid></title>
<body>
	<section>
		<title>Instructions <i>[common element]</i></title>
	    <p><sourcexml>pnum</sourcexml> becomes <targetxml>desig/ref:para</targetxml>.</p>
			<p>Attribute <sourcexml>pnum/@count</sourcexml> becomes <targetxml>desig/@value</targetxml> and
					<targetxml>desig/ref:para/@num</targetxml> and <sourcexml>@inline</sourcexml>
				becomes <targetxml>@inline</targetxml>. </p>
			<p>Value of <targetxml>ref:para/@para-scheme</targetxml> is
					<sourcexml>ci:reporter</sourcexml> value from (<b><i>first</i></b>)
					<sourcexml>ci:cite/[@type=”cite4thisdoc”]/ci:case/ci:caseref/ci:reporter</sourcexml>.</p>
			<p><targetxml>ref:para/@para-scheme-type="reporter-abbrev"</targetxml> is hardcoded
				value.</p>
    </section>
	
    <example>
		<title>Source XML</title>
		<codeblock>
&lt;p&gt;
    &lt;pnum count="1"&gt;[1]&lt;/pnum&gt;
    &lt;text&gt;...&lt;/text&gt;
&lt;/p&gt;

<b>and</b>

&lt;ci:cite type="cite4thisdoc"&gt;
    &lt;ci:case&gt;
        &lt;ci:caseref&gt;
            &lt;ci:reporter value="urj" /&gt;
            &lt;ci:refnum num="BC200000011" /&gt;
        &lt;/ci:caseref&gt;
    &lt;/ci:case&gt;
    &lt;ci:content&gt;
        &lt;citefragment searchtype="CASE-CITE-REF"&gt;BC200000011&lt;/citefragment&gt;
        &lt;refpt id="BC200000011" type="ext"&gt;&lt;/refpt&gt;
    &lt;/ci:content&gt;
&lt;/ci:cite&gt;
	</codeblock>
    </example>
	
    <example>
		<title>Target XML</title>
		<codeblock>
&lt;p&gt;
    &lt;desig value="1"&gt;&lt;ref:para num="1" para-scheme="urj" para-scheme-type="reporter-abbrev"&gt;[1]&lt;/ref:para&gt;&lt;/desig&gt;
    &lt;text&gt;...&lt;/text&gt;
&lt;/p&gt;
</codeblock>
    </example>

    <section>
		<title>Changes</title>
        <p>2017-05-15: <ph id="change_20170515_RS">The same rule is applicable on CA10.</ph></p>
		<p>2014-09-12: <ph id="change_20140912_PS">Created, Applicable on AU01, AU13, NZ03, CA01 and CA04.</ph></p>
    </section>
  <!--  <xsltinclusion>
        <xsl:stylesheet version="2.0">
            <!-\- BRT: This rule is stream-specific and doesn't below in common -\-></xsl:stylesheet>
    </xsltinclusion>-->
</body>
	</dita:topic>

	<!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
	<!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_pnum-to-LexisAdvance_desig_ref.para.dita  -->
	<!--<xsl:message>Rosetta_pnum-to-LexisAdvance_desig_ref.para.xsl requires manual development!</xsl:message> -->

            <!-- BRT: This rule is stream-specific and doesn't below in common -->
    <!-- Awantika: Created this template, one can add streamID if same xpath is required -->
    <xsl:template match="pnum">
        <xsl:if test="$streamID=('HK03','AU01', 'NZ03','CA04','CA01' , 'CA10')">
            <desig>
                <xsl:attribute name="value">
                    <xsl:value-of select="@count"/>
                </xsl:attribute>
                <ref:para>
                    <xsl:attribute name="num">
                        <xsl:value-of select="@count"/>
                    </xsl:attribute>
                    <xsl:if test="//ci:cite[position()=1]/ci:case/ci:caseref/ci:reporter/@value[1]">
                    <xsl:attribute name="para-scheme">
                        <!--<xsl:value-of select="(//ci:cite[position()=1]/ci:case/ci:caseref/ci:reporter/@value)[1]"/>-->
                        <!-- Awantika:2017-10-30- translated to remove the space and create underscore to get the valid attribute value-->
                        <xsl:value-of select="translate((//ci:cite[position()=1]/ci:case/ci:caseref/ci:reporter/@value)[1],' ','_')"/>
                    </xsl:attribute>
                    </xsl:if>
                    <xsl:attribute name="para-scheme-type">reporter-abbrev</xsl:attribute>
                    <xsl:apply-templates/>
                </ref:para>
                <!-- Awantika: Duplicate ref:para if case:courtcite/ci:cite/@type="cite4thisdoc" in AU01 and NZ03-->
                <xsl:if test="$streamID=('AU01', 'NZ03') and //case:courtcite[ci:cite[@type='cite4thisdoc']]">
                    <ref:para>
                        <xsl:attribute name="num">
                            <xsl:value-of select="@count"/>
                        </xsl:attribute>
                        <!--Satbir: Added choose condition for ci:nz because NZ03 contet is not having ci:au markup in source-->
                        <xsl:choose>
                            <xsl:when test="not((//ci:nz/@courtcode)[1])"/>
                            <xsl:otherwise>
                                    <xsl:attribute name="para-scheme">
                                        <xsl:value-of select="(//ci:nz/@courtcode)[1]"/>
                                    </xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:attribute name="para-scheme-type">
                            <xsl:text>court-code</xsl:text>
                        </xsl:attribute>	                   
                    </ref:para>
                </xsl:if>
            </desig>
        </xsl:if>
    </xsl:template>
</xsl:stylesheet>